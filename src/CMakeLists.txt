file(GLOB SRC_FILES *.h *.cpp)

if(USE_NVTX AND WIN32)
    add_definitions(-DUSE_NVTX)
    include_directories("$ENV{NVTOOLSEXT_PATH}/include")
    link_directories("$ENV{NVTOOLSEXT_PATH}/lib/x64")
endif()

include_directories(${EXT_INCLUDE_DIRS})

if(USE_OPENEXR)
    set(OPENEXR_LIB IlmImf)
    add_definitions(-DUSE_OPENEXR)
endif()

# Run custom command to convert binary files into uint8_t arrays that could
# be included in main application sources.
# Glob up resource files
file(GLOB RESOURCE_FILES 
    "${PROJECT_SOURCE_DIR}/resources/fonts/*.ttf"
    "${PROJECT_SOURCE_DIR}/resources/icons/*.png")

add_executable(res2c ${PROJECT_SOURCE_DIR}/resources/res2c.cpp ${DOCOPT_SRC_FILES})

add_custom_command(
  OUTPUT resources.cpp resources.h
  COMMAND res2c ARGS --binary ${RESOURCE_FILES}
  DEPENDS ${RESOURCE_FILES}
  COMMENT "Running res2c to convert fonts and icons"
  PRE_BUILD VERBATIM)

set(EXTRA_SRC_FILES ${EXTRA_SRC_FILES} resources.cpp)

if(EMBED_SHADERS)
  file(GLOB SHADER_FILES "${PROJECT_SOURCE_DIR}/shaders/*.*")
  message(STATUS "Shader files ${SHADER_FILES}")
  
  set(EXTRA_SRC_FILES ${EXTRA_SRC_FILES} shader_resources.h)
  add_definitions(-DEMBED_SHADERS)

  add_custom_command(
    OUTPUT shader_resources.h
    COMMAND res2c ARGS --shaders ${SHADER_FILES}
    DEPENDS ${SHADER_FILES}
    COMMENT "Running res2c to merge shader files"
    PRE_BUILD VERBATIM)
endif()

include_directories(${CMAKE_CURRENT_BINARY_DIR})  # This is used for the autogenerated resource files.

add_definitions(-D_CRT_SECURE_NO_WARNINGS -DVERSION="${VERSION}")

if(WIN32)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup")
    set(GL_LIBS glu32 OpenGL32)
elseif(UNIX AND NOT APPLE)
    set(GL_LIBS GL)
endif()

add_executable(${PROJECT_NAME} ${SRC_FILES} ${IMGUI_SRC_FILES} 
               ${GL3W_SRC_FILES} ${DOCOPT_SRC_FILES} ${EXTRA_SRC_FILES})
source_group("External Files\\gl3w"   FILES ${GL3W_SRC_FILES})
source_group("External Files\\imgui"  FILES ${IMGUI_SRC_FILES})
source_group("External Files\\docopt" FILES ${DOCOPT_SRC_FILES})

target_link_libraries(${PROJECT_NAME} PRIVATE glfw spdlog ${GL_LIBS} ${OPENEXR_LIB})

if(USE_OPENEXR AND WIN32)
    target_link_libraries(${PROJECT_NAME} PRIVATE zlibstatic)
endif()

if(MSVC)
    set_target_properties(${PROJECT_NAME} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}")
    set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
elseif(APPLE)
    set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE TRUE)
    set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "BakTsiu")
    set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_BUNDLE_GUI_IDENTIFIER "com.im.BakTsiu")
    set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_ICON_FILE icon.icns)
    set_source_files_properties(${PROJECT_SOURCE_DIR}/resources/icon.icns PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
endif()

if(USE_NVTX AND WIN32)
    add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy "$ENV{NVTOOLSEXT_PATH}bin/x64/nvToolsExt64_1.dll" $<TARGET_FILE_DIR:${PROJECT_NAME}>)
endif()

if(WIN32)
    install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION "bin")
elseif(APPLE)
    install(TARGETS ${PROJECT_NAME} BUNDLE DESTINATION "/Applications")
else()
    install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION "bin")
    install(FILES ${PROJECT_SOURCE_DIR}/resources/baktsiu.desktop DESTINATION "/usr/share/applications")
    install(FILES ${PROJECT_SOURCE_DIR}/resources/app.png DESTINATION "/usr/share/pixmaps" RENAME baktsiu.png)
endif()